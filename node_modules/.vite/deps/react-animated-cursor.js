import {
  require_jsx_runtime
} from "./chunk-THSETBW5.js";
import {
  require_react
} from "./chunk-WC4MWUMO.js";
import {
  __toESM
} from "./chunk-4EOJPDL2.js";

// node_modules/react-animated-cursor/dist/index.es.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react = __toESM(require_react());
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function useEventListener(eventName, handler, element) {
  if (element === void 0) {
    element = window;
  }
  var savedHandler = (0, import_react.useRef)(null);
  (0, import_react.useEffect)(function() {
    savedHandler.current = handler;
  }, [handler]);
  (0, import_react.useEffect)(function() {
    var isSupported = element && element.addEventListener;
    if (!isSupported)
      return;
    var eventListener = function(event) {
      if (savedHandler.current) {
        savedHandler.current(event);
      }
    };
    element.addEventListener(eventName, eventListener);
    return function() {
      element.removeEventListener(eventName, eventListener);
    };
  }, [eventName, element]);
}
var IsDevice = function() {
  if (typeof navigator === "undefined")
    return;
  var ua = navigator.userAgent;
  return {
    info: ua,
    Android: function() {
      return ua.match(/Android/i);
    },
    BlackBerry: function() {
      return ua.match(/BlackBerry/i);
    },
    IEMobile: function() {
      return ua.match(/IEMobile/i);
    },
    iOS: function() {
      return ua.match(/iPhone|iPad|iPod/i);
    },
    iPad: function() {
      return ua.match(/Mac/) && navigator.maxTouchPoints && navigator.maxTouchPoints > 2;
    },
    OperaMini: function() {
      return ua.match(/Opera Mini/i);
    },
    /**
     * Any Device
     */
    any: function() {
      return IsDevice.Android() || IsDevice.BlackBerry() || IsDevice.iOS() || IsDevice.iPad() || IsDevice.OperaMini() || IsDevice.IEMobile();
    }
  };
}();
function findInArray(arr, callback) {
  var args = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    args[_i - 2] = arguments[_i];
  }
  if (typeof callback !== "function") {
    throw new TypeError("callback must be a function");
  }
  var list = Object(arr);
  var length = list.length >>> 0;
  var thisArg = args[2];
  for (var i = 0; i < length; i++) {
    var element = list[i];
    if (callback.call(thisArg, element, i, list)) {
      return element;
    }
  }
  return void 0;
}
function CursorCore(_a) {
  var _b = _a.clickables, clickables = _b === void 0 ? [
    "a",
    'input[type="text"]',
    'input[type="email"]',
    'input[type="number"]',
    'input[type="submit"]',
    'input[type="image"]',
    "label[for]",
    "select",
    "textarea",
    "button",
    ".link"
  ] : _b, children = _a.children, _c = _a.color, color = _c === void 0 ? "220, 90, 90" : _c, _d = _a.innerScale, innerScale = _d === void 0 ? 0.6 : _d, _e = _a.innerSize, innerSize = _e === void 0 ? 8 : _e, innerStyle = _a.innerStyle, _f = _a.outerAlpha, outerAlpha = _f === void 0 ? 0.4 : _f, _g = _a.outerScale, outerScale = _g === void 0 ? 6 : _g, _h = _a.outerSize, outerSize = _h === void 0 ? 8 : _h, outerStyle = _a.outerStyle, _j = _a.showSystemCursor, showSystemCursor = _j === void 0 ? false : _j, _k = _a.trailingSpeed, trailingSpeed = _k === void 0 ? 8 : _k;
  var defaultOptions = (0, import_react.useMemo)(function() {
    return {
      children,
      color,
      innerScale,
      innerSize,
      innerStyle,
      outerAlpha,
      outerScale,
      outerSize,
      outerStyle
    };
  }, [
    children,
    color,
    innerScale,
    innerSize,
    innerStyle,
    outerAlpha,
    outerScale,
    outerSize,
    outerStyle
  ]);
  var cursorOuterRef = (0, import_react.useRef)(null);
  var cursorInnerRef = (0, import_react.useRef)(null);
  var requestRef = (0, import_react.useRef)(null);
  var previousTimeRef = (0, import_react.useRef)(null);
  var _l = (0, import_react.useState)({
    x: 0,
    y: 0
  }), coords = _l[0], setCoords = _l[1];
  var _m = (0, import_react.useState)(false), isVisible = _m[0], setIsVisible = _m[1];
  var _o = (0, import_react.useState)(defaultOptions), options = _o[0], setOptions = _o[1];
  var _p = (0, import_react.useState)(false), isActive = _p[0], setIsActive = _p[1];
  var _q = (0, import_react.useState)(false), isActiveClickable = _q[0], setIsActiveClickable = _q[1];
  var endX = (0, import_react.useRef)(0);
  var endY = (0, import_react.useRef)(0);
  var onMouseMove = (0, import_react.useCallback)(function(event) {
    var clientX = event.clientX, clientY = event.clientY;
    setCoords({ x: clientX, y: clientY });
    cursorInnerRef.current.style.top = "".concat(clientY, "px");
    cursorInnerRef.current.style.left = "".concat(clientX, "px");
    endX.current = clientX;
    endY.current = clientY;
  }, []);
  var animateOuterCursor = (0, import_react.useCallback)(
    function(time) {
      if (previousTimeRef.current !== void 0) {
        coords.x += (endX.current - coords.x) / trailingSpeed;
        coords.y += (endY.current - coords.y) / trailingSpeed;
        cursorOuterRef.current.style.top = "".concat(coords.y, "px");
        cursorOuterRef.current.style.left = "".concat(coords.x, "px");
      }
      previousTimeRef.current = time;
      requestRef.current = requestAnimationFrame(animateOuterCursor);
    },
    [requestRef]
    // eslint-disable-line
  );
  (0, import_react.useEffect)(function() {
    requestRef.current = requestAnimationFrame(animateOuterCursor);
    return function() {
      return cancelAnimationFrame(requestRef.current);
    };
  }, [animateOuterCursor]);
  var getScaleAmount = function(orignalSize, scaleAmount) {
    return "".concat(parseInt(String(orignalSize * scaleAmount)), "px");
  };
  var scaleBySize = (0, import_react.useCallback)(function(cursorRef, orignalSize, scaleAmount) {
    if (cursorRef) {
      cursorRef.style.height = getScaleAmount(orignalSize, scaleAmount);
      cursorRef.style.width = getScaleAmount(orignalSize, scaleAmount);
    }
  }, []);
  var onMouseDown = (0, import_react.useCallback)(function() {
    return setIsActive(true);
  }, []);
  var onMouseUp = (0, import_react.useCallback)(function() {
    return setIsActive(false);
  }, []);
  var onMouseEnterViewport = (0, import_react.useCallback)(function() {
    return setIsVisible(true);
  }, []);
  var onMouseLeaveViewport = (0, import_react.useCallback)(function() {
    return setIsVisible(false);
  }, []);
  useEventListener("mousemove", onMouseMove);
  useEventListener("mousedown", onMouseDown);
  useEventListener("mouseup", onMouseUp);
  useEventListener("mouseover", onMouseEnterViewport);
  useEventListener("mouseout", onMouseLeaveViewport);
  (0, import_react.useEffect)(function() {
    if (isActive) {
      scaleBySize(cursorInnerRef.current, options.innerSize, options.innerScale);
      scaleBySize(cursorOuterRef.current, options.outerSize, options.outerScale);
    } else {
      scaleBySize(cursorInnerRef.current, options.innerSize, 1);
      scaleBySize(cursorOuterRef.current, options.outerSize, 1);
    }
  }, [
    options.innerSize,
    options.innerScale,
    options.outerSize,
    options.outerScale,
    scaleBySize,
    isActive
  ]);
  (0, import_react.useEffect)(function() {
    if (isActiveClickable) {
      scaleBySize(cursorInnerRef.current, options.innerSize, options.innerScale * 1.2);
      scaleBySize(cursorOuterRef.current, options.outerSize, options.outerScale * 1.4);
    }
  }, [
    options.innerSize,
    options.innerScale,
    options.outerSize,
    options.outerScale,
    scaleBySize,
    isActiveClickable
  ]);
  (0, import_react.useEffect)(function() {
    if (isVisible) {
      cursorInnerRef.current.style.opacity = "1";
      cursorOuterRef.current.style.opacity = "1";
    } else {
      cursorInnerRef.current.style.opacity = "0";
      cursorOuterRef.current.style.opacity = "0";
    }
  }, [isVisible]);
  (0, import_react.useEffect)(function() {
    var clickableEls = document.querySelectorAll(clickables.map(function(clickable) {
      return typeof clickable === "object" && (clickable === null || clickable === void 0 ? void 0 : clickable.target) ? clickable.target : clickable !== null && clickable !== void 0 ? clickable : "";
    }).join(","));
    clickableEls.forEach(function(el) {
      if (!showSystemCursor)
        el.style.cursor = "none";
      var clickableOptions = typeof clickables === "object" ? findInArray(clickables, function(clickable) {
        return typeof clickable === "object" && el.matches(clickable.target);
      }) : {};
      var options2 = __assign(__assign({}, defaultOptions), clickableOptions);
      el.addEventListener("mouseover", function() {
        setIsActive(true);
        setOptions(options2);
      });
      el.addEventListener("click", function() {
        setIsActive(true);
        setIsActiveClickable(false);
      });
      el.addEventListener("mousedown", function() {
        setIsActiveClickable(true);
      });
      el.addEventListener("mouseup", function() {
        setIsActive(true);
      });
      el.addEventListener("mouseout", function() {
        setIsActive(false);
        setIsActiveClickable(false);
        setOptions(defaultOptions);
      });
    });
    return function() {
      clickableEls.forEach(function(el) {
        var clickableOptions = typeof clickables === "object" ? findInArray(clickables, function(clickable) {
          return typeof clickable === "object" && el.matches(clickable.target);
        }) : {};
        var options2 = __assign(__assign({}, defaultOptions), clickableOptions);
        el.removeEventListener("mouseover", function() {
          setIsActive(true);
          setOptions(options2);
        });
        el.removeEventListener("click", function() {
          setIsActive(true);
          setIsActiveClickable(false);
        });
        el.removeEventListener("mousedown", function() {
          setIsActiveClickable(true);
        });
        el.removeEventListener("mouseup", function() {
          setIsActive(true);
        });
        el.removeEventListener("mouseout", function() {
          setIsActive(false);
          setIsActiveClickable(false);
          setOptions(defaultOptions);
        });
      });
    };
  }, [isActive, clickables, showSystemCursor, defaultOptions]);
  var coreStyles = {
    zIndex: 999,
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    position: "fixed",
    borderRadius: "50%",
    pointerEvents: "none",
    transform: "translate(-50%, -50%)",
    transition: "opacity 0.15s ease-in-out, height 0.2s ease-in-out, width 0.2s ease-in-out"
  };
  var styles = {
    cursorInner: __assign(__assign({ width: !options.children ? options.innerSize : "auto", height: !options.children ? options.innerSize : "auto", backgroundColor: !options.children ? "rgba(".concat(options.color, ", 1)") : "transparent" }, coreStyles), options.innerStyle && options.innerStyle),
    cursorOuter: __assign(__assign({ width: options.outerSize, height: options.outerSize, backgroundColor: "rgba(".concat(options.color, ", ").concat(options.outerAlpha, ")") }, coreStyles), options.outerStyle && options.outerStyle)
  };
  if (!showSystemCursor)
    document.body.style.cursor = "none";
  return (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [(0, import_jsx_runtime.jsx)("div", { ref: cursorOuterRef, style: styles.cursorOuter }), (0, import_jsx_runtime.jsx)("div", __assign({ ref: cursorInnerRef, style: styles.cursorInner }, { children: (0, import_jsx_runtime.jsx)("div", __assign({ style: {
    opacity: !options.children ? 0 : 1,
    transition: "opacity 0.3s ease-in-out"
  } }, { children: options.children })) }))] });
}
function AnimatedCursor(_a) {
  var children = _a.children, clickables = _a.clickables, color = _a.color, innerScale = _a.innerScale, innerSize = _a.innerSize, innerStyle = _a.innerStyle, outerAlpha = _a.outerAlpha, outerScale = _a.outerScale, outerSize = _a.outerSize, outerStyle = _a.outerStyle, showSystemCursor = _a.showSystemCursor, trailingSpeed = _a.trailingSpeed;
  if (typeof navigator !== "undefined" && IsDevice.any()) {
    return (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, {});
  }
  return (0, import_jsx_runtime.jsx)(CursorCore, __assign({ clickables, color, innerScale, innerSize, innerStyle, outerAlpha, outerScale, outerSize, outerStyle, showSystemCursor, trailingSpeed }, { children }));
}
export {
  AnimatedCursor as default
};
//# sourceMappingURL=react-animated-cursor.js.map
